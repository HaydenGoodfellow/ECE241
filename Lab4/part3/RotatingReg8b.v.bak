module RotatingReg8b (SW, KEY, LEDR);
	input [9:0] SW;
	input [3:0] KEY;
	output [7:0] LEDR;
	
	rotate r0(SW[7:0], KEY[1], KEY[2], KEY[3], KEY[0], SW[9], LEDR[7:0]);
endmodule
	
module rotate (data, parLoad, rotR, LSR, clk, reset, Q);
	input [7:0] data;
	input parLoad, rotR, LSR, clk, reset;
	output [7:0] Q;
	wire [7:0] w;
	wire l2r, holdclk;
	assign holdclk = clk & ~(rotR & LSR);
	
	Mux_DFF m0(data[0], parLoad, l2r, w[1], w[7], clk, reset, Q[0]); 
	Mux_DFF m1(data[1], parLoad, l2r, w[2], w[0], clk, reset, Q[1]); 
	Mux_DFF m2(data[2], parLoad, l2r, w[3], w[1], clk, reset, Q[2]); 
	Mux_DFF m3(data[3], parLoad, l2r, w[4], w[2], clk, reset, Q[3]); 
	Mux_DFF m4(data[4], parLoad, l2r, w[5], w[3], clk, reset, Q[4]); 
	Mux_DFF m5(data[5], parLoad, l2r, w[6], w[4], clk, reset, Q[5]); 
	Mux_DFF m6(data[6], parLoad, l2r, w[7], w[5], clk, reset, Q[6]); 
	Mux_DFF m7(data[7], parLoad, l2r, w[0], w[6], holdclk, reset, Q[7]); 
endmodule 
	
module Mux_DFF (Dat, pL, loadL, right, left, clk, reset, Qm);
	input Dat, pL, loadL, right, left, clk, reset;
	output Qm;
	wire [1:0] w;
	
	mux2to1 mux0(right, left, ldL, w[0]);
	mux2to1 mux1(Dat, w[0], pL, w[1]);
	
	DFF ff1(w[1], clk, reset, Qm);
endmodule 
	
module mux2to1 (x, y, s, m);
	input x, y, s;
	output m;
	
	assign m = s ? y : x;
endmodule 


module DFF (D, clk, reset, out);
	input D, clk, reset;
	output out;
	reg out;
	
	always @(posedge clk)
	begin 
		if (reset == 1)
			out <= 0;
		else
			out <= D;
	end
endmodule



