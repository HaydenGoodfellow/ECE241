module ALU (SW, KEY, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);
	
	input [8:0] SW;
	input [2:0] KEY;
	output [7:0] LEDR;
	output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
	
	wire [3:0] A, B;
	wire [2:0] K;
	wire [4:0] addOut;
	wire [7:0] Cat;
	
	assign A = SW[7:4];
	assign B = SW[3:0];
	assign K = ~KEY;
	
	FARip4b a1(SW[8:0],
				  addOut[4:0]);
	
	reg [7:0] outReg;
	
	always @(posedge Clock)
	begin
		case (K)
			3'b000: outReg = addOut;
			3'b001: outReg = A + B;
			3'b010: begin
				outReg[7:4] = ~&{A, B};
				outReg[3:0] = ~|{A, B};
				end
			3'b011: begin
				if (|{A, B}) 
					outReg = 8'b11000000;
				end
			3'b100: begin
				if ((|A && ~(^A) && ~(&A)) && (^B && (&B[3:2] | &B[1:0])))
					outReg = 8'b00111111;
				end
			3'b101: outReg = {B, A};
			3'b111: outReg <= outReg;
			default: outReg = 8'b00000000;
		endcase
	end
	
	assign LEDR[7:0] = outReg;
	HexDecoder h0 (SW[3:0], HEX0);
	HexDecoder h1 (SW[7:4], HEX2);
	HexDecoder h2 (4'b0000, HEX1);
	HexDecoder h3 (4'b0000, HEX3);
	HexDecoder h4 (LEDR[3:0], HEX4);
	HexDecoder h5 (LEDR[7:4], HEX5);
		
endmodule

module FARip4b (In, Out);
	
	input [8:0] In;
	output [9:0] Out;
	wire w1, w2, w3;
	
	FA u0 (.in1(In[4]), .in2(In[0]), .cin(In[8]),
			 .s(Out[0]), .cout(w1) );
			 
	FA u1 (.in1(In[5]), .in2(In[1]), .cin(w1),
			 .s(Out[1]), .cout(w2) );
			 
	FA u2 (.in1(In[6]), .in2(In[2]), .cin(w2),
			 .s(Out[2]), .cout(w3) );
			 
	FA u3 (.in1(In[7]), .in2(In[3]), .cin(w3),
			 .s(Out[3]), .cout(Out[9]) );
	
endmodule

module FA (input in1, in2, cin,
			  output s, cout);
	
	assign s = in1 ^ in2 ^ cin;
	assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);
	
endmodule 

module HexDecoder (In, HEX);
	input [3:0] In;
	output [6:0] HEX;
	
	assign c0 = In[0];
	assign c1 = In[1];
	assign c2 = In[2];
	assign c3 = In[3];
	
	assign HEX[0] = (~c3 & ~c2 & ~c1 & c0) + (~c3 & c2 & ~c1 & ~c0) + (c3 & ~c2 & c1 & c0) + (c3 & c2 & ~c1 & c0);
	
	assign HEX[1] = (~c3 & c2 & ~c1 & c0) + (~c3 & c2 & c1 & ~c0) + (c3 & ~c2 & c1 & c0) + (c3 & c2 & ~c1 & ~c0) + (c3 & c2 & c1 & ~c0) + (c3 & c2 & c1 & c0);
	
	assign HEX[2] = (~c3 & ~c2 & c1 & ~c0) + (c3 & c2 & ~c1 & ~c0) + (c3 & c2 & c1 & ~c0) + (c3 & c2 & c1 & c0);
	
	assign HEX[3] = (~c3 & ~c2 & ~c1 & c0) + (~c3 & c2 & ~c1 & ~c0) + (~c3 & c2 & c1 & c0) + (c3 & ~c2 & ~c1 & c0) + (c3 & ~c2 & c1 & ~c0) + (c3 & c2 & c1 & c0);
	
	assign HEX[4] = (~c3 & ~c2 & ~c1 & c0) + (~c3 & ~c2 & c1 & c0) + (~c3 & c2 & ~c1 & ~c0) + (~c3 & c2 & ~c1 & c0) + (~c3 & c2 & c1 & c0) + (c3 & ~c2 & ~c1 & c0);
	
	assign HEX[5] = (~c3 & ~c2 & ~c1 & c0) + (~c3 & ~c2 & c1 & ~c0) + (~c3 & ~c2 & c1 & c0) + (~c3 & c2 & c1 & c0) + (c3 & c2 & ~c1 & c0);
	
	assign HEX[6] = (~c3 & ~c2 & ~c1 & ~c0) + (~c3 & ~c2 & ~c1 & c0) + (~c3 & c2 & c1 & c0) + (c3 & c2 & ~c1 & ~c0);

endmodule 

